%!PS-Adobe-3.0 EPSF-3.0
%APL_DSC_Encoding: UTF8
%APLProducer: (Version 10.15.4 (Build 19E287) Quartz PS Context)
%%Title: (Unknown)
%%Creator: (Unknown)
%%CreationDate: (Unknown)
%%For: (Unknown)
%%DocumentData: Clean7Bit
%%LanguageLevel: 2
%%Pages: 1
%%BoundingBox: 0 0 101 102
%%EndComments
%%BeginProlog
%%BeginFile: cg-pdf.ps
%%Copyright: Copyright 2000-2004 Apple Computer Incorporated.
%%Copyright: All Rights Reserved.
currentpacking true setpacking
/cg_md 141 dict def
cg_md begin
/L3? languagelevel 3 ge def
/bd{bind def}bind def
/ld{load def}bd
/xs{exch store}bd
/xd{exch def}bd
/cmmtx matrix def
mark
/sc/setcolor
/scs/setcolorspace
/dr/defineresource
/fr/findresource
/T/true
/F/false
/d/setdash
/w/setlinewidth
/J/setlinecap
/j/setlinejoin
/M/setmiterlimit
/i/setflat
/rc/rectclip
/rf/rectfill
/rs/rectstroke
/f/fill
/f*/eofill
/sf/selectfont
/s/show
%/as/ashow
/xS/xshow
/yS/yshow
/xyS/xyshow
/S/stroke
/m/moveto
/l/lineto
/c/curveto
/h/closepath
/n/newpath
/q/gsave
/Q/grestore
counttomark 2 idiv
%dup (number of ld's = )print == flush	% *** how many 
{ld}repeat pop
/SC{	% CSname
    /ColorSpace fr scs
}bd
/sopr /setoverprint where{pop/setoverprint}{/pop}ifelse ld
/soprm /setoverprintmode where{pop/setoverprintmode}{/pop}ifelse ld
/cgmtx matrix def
/sdmtx{cgmtx currentmatrix pop}bd
/CM {cgmtx setmatrix}bd		% pop the ctm: our gstate ctm on host is now identity
/cm {cmmtx astore CM concat}bd	% reset the matrix and then concat
/W{clip newpath}bd
/W*{eoclip newpath}bd

statusdict begin product end dup (HP) anchorsearch{
    pop pop pop	% pop off the search results
    true
}{
    pop	% previous search result
   (hp) anchorsearch{
	pop pop true
    }{
	pop false
    }ifelse
}ifelse

{	% HP is the product: we use this method of stroking because of a bug in their clone printers with certain T3 fonts
    { 
	{ % charCode Wx Wy
	    pop pop % charCode
	    (0)dup 0 4 -1 roll put
	    F charpath
	}cshow
    }
}{
    {F charpath}
}ifelse
/cply exch bd
/cps {cply stroke}bd
/pgsave 0 def
/bp{/pgsave save store}bd
/ep{pgsave restore showpage}def		% dont' bind
/re{4 2 roll m 1 index 0 rlineto 0 exch rlineto neg 0 rlineto h}bd

/scrdict 10 dict def
/scrmtx matrix def
/patarray 0 def
/createpat{patarray 3 1 roll put}bd
/makepat{
scrmtx astore pop
gsave
initgraphics
CM 
patarray exch get
scrmtx
makepattern
grestore
setpattern
}bd

/cg_BeginEPSF{
    userdict save/cg_b4_Inc_state exch put
    userdict/cg_endepsf/cg_EndEPSF load put
    count userdict/cg_op_count 3 -1 roll put 
    countdictstack dup array dictstack userdict/cg_dict_array 3 -1 roll put
    3 sub{end}repeat
    /showpage {} def
    0 setgray 0 setlinecap 1 setlinewidth 0 setlinejoin
    10 setmiterlimit [] 0 setdash newpath
    false setstrokeadjust false setoverprint	% don't use F
}bd
/cg_EndEPSF{
  countdictstack 3 sub { end } repeat
  cg_dict_array 3 1 index length 3 sub getinterval
  {begin}forall
  count userdict/cg_op_count get sub{pop}repeat
  userdict/cg_b4_Inc_state get restore
  F setpacking
}bd

/cg_biproc{currentfile/RunLengthDecode filter}bd
/cg_aiproc{currentfile/ASCII85Decode filter/RunLengthDecode filter}bd
/ImageDataSource 0 def
L3?{
    /cg_mibiproc{pop pop/ImageDataSource{cg_biproc}def}bd
    /cg_miaiproc{pop pop/ImageDataSource{cg_aiproc}def}bd
}{
    /ImageBandMask 0 def
    /ImageBandData 0 def
    /cg_mibiproc{
	string/ImageBandMask xs
	string/ImageBandData xs
	/ImageDataSource{[currentfile/RunLengthDecode filter dup ImageBandMask/readstring cvx
	    /pop cvx dup ImageBandData/readstring cvx/pop cvx]cvx bind}bd
    }bd
    /cg_miaiproc{	
	string/ImageBandMask xs
	string/ImageBandData xs
	/ImageDataSource{[currentfile/ASCII85Decode filter/RunLengthDecode filter
	    dup ImageBandMask/readstring cvx
	    /pop cvx dup ImageBandData/readstring cvx/pop cvx]cvx bind}bd
    }bd
}ifelse
/imsave 0 def
/BI{save/imsave xd mark}bd
/EI{imsave restore}bd
/ID{
counttomark 2 idiv
dup 2 add	% leave room for imagetype and imagematrix
dict begin
{def} repeat
pop		% remove mark
/ImageType 1 def
/ImageMatrix[Width 0 0 Height neg 0 Height]def
currentdict dup/ImageMask known{ImageMask}{F}ifelse exch
% currentdict on stack
L3?{
    dup/MaskedImage known
    { 
	pop
	<<
	    /ImageType 3
	    /InterleaveType 2
	    /DataDict currentdict
	    /MaskDict
	    <<  /ImageType 1
		/Width Width
		/Height Height
		/ImageMatrix ImageMatrix
		/BitsPerComponent 1
		/Decode [0 1]
		currentdict/Interpolate known
		{/Interpolate Interpolate}if
	    >>
	>>
    }if
}if
exch
{imagemask}{image}ifelse	
end	% pop imagedict from dict stack
}bd

/cguidfix{statusdict begin mark version end
{cvr}stopped{cleartomark 0}{exch pop}ifelse
2012 lt{dup findfont dup length dict begin
{1 index/FID ne 2 index/UniqueID ne and
{def} {pop pop} ifelse}forall
currentdict end definefont pop
}{pop}ifelse
}bd
/t_array 0 def
/t_i 0 def
/t_c 1 string def
/x_proc{ % x y
    exch t_array t_i get add exch moveto
    /t_i t_i 1 add store
}bd
/y_proc{ % x y
    t_array t_i get add moveto
    /t_i t_i 1 add store
}bd
/xy_proc{
        % x y
	t_array t_i 2 copy 1 add get 3 1 roll get 
	4 -1 roll add 3 1 roll add moveto
	/t_i t_i 2 add store
}bd
/sop 0 def		% don't bind sop
/cp_proc/x_proc ld 	% default moveto proc is for xwidths only
/base_charpath		% string array
{
    /t_array xs
    /t_i 0 def
    { % char
	t_c 0 3 -1 roll put
        currentpoint
	t_c cply sop
        cp_proc
    }forall
    /t_array 0 def
}bd
/sop/stroke ld		% default sop is stroke. Done here so we don't bind in /base_charpath 

% default sop is stroke
/nop{}def
/xsp/base_charpath ld
/ysp{/cp_proc/y_proc ld base_charpath/cp_proc/x_proc ld}bd
/xysp{/cp_proc/xy_proc ld base_charpath/cp_proc/x_proc ld}bd
/xmp{/sop/nop ld /cp_proc/x_proc ld base_charpath/sop/stroke ld}bd
/ymp{/sop/nop ld /cp_proc/y_proc ld base_charpath/sop/stroke ld}bd
/xymp{/sop/nop ld /cp_proc/xy_proc ld base_charpath/sop/stroke ld}bd
/refnt{ % newname encoding fontname
findfont dup length dict copy dup
/Encoding 4 -1 roll put 
definefont pop
}bd
/renmfont{ % newname fontname
findfont dup length dict copy definefont pop
}bd

L3? dup dup{save exch}if

% languagelevel2 ONLY code goes here

/Range 0 def
/DataSource 0 def
/val 0 def
/nRange 0 def
/mulRange 0 def
/d0 0 def
/r0 0 def
/di 0 def
/ri 0 def
/a0 0 def
/a1 0 def
/r1 0 def
/r2 0 def
/dx 0 def
/Nsteps 0 def
/sh3tp 0 def
/ymax 0 def
/ymin 0 def
/xmax 0 def
/xmin 0 def

/setupFunEval % funDict -- 	% this calculates and sets up a function dict for evaulation.
{
    begin
	/nRange Range length 2 idiv store
	/mulRange   % precompute the range data needed to map a sample value from the table to a range value
		    % this data looks like [ range0mul range0min range1mul range1min ... rangeN-1mul rangeN-1min ]
	[ 
	    0 1 nRange 1 sub
	    { % index
		    2 mul/nDim2 xd		% 2*dimension# we are dealing with
		    Range nDim2 get		% ymin
		    Range nDim2 1 add get	% ymin ymax 
		    1 index sub			% ymin (ymax-ymin)
						% xmin = 0, xmax = 255 (2^bitspersample - 1)
		    255 div			% ymin (ymax-ymin)/(xmax - xmin)
		    exch			% (ymax-ymin)/(xmax - xmin) ymin
	    }for
	]store
    end
}bd

/FunEval % val1 fundict -> comp1 comp2 ... compN
{
    begin
	% the value passed in is the base index into the table
	nRange mul /val xd	% compute the actual index to the table
				% since there are nRange entries per base index
	0 1 nRange 1 sub
	{
	    dup 2 mul/nDim2 xd % dim
	    val	% base value to use to do our lookup
	    add DataSource exch get %  lookedupval
	    mulRange nDim2 get mul 	% lookedupval*(ymax-ymin)/(xmax-xmin)
	    mulRange nDim2 1 add get % lookedupval*(ymax-ymin)/(xmax-xmin) ymin
	    add % interpolated result
	}for	% comp1 comp2 ... compN
    end
}bd

/max % a b -> max(a, b)
{
	2 copy lt
	{exch pop}{pop}ifelse
}bd

/sh2
{	% emulation of shading type 2. Assumes shading dictionary is top dictionary on the dict stack
	/Coords load aload pop 	% x0 y0 x1 y1
	3 index 3 index translate	% origin is now at beginning point of shading
					% x0 y0 x1 y1
	3 -1 roll sub	% x0 x1 y1-y0
	3 1 roll exch 	% y1-y0 x1 x0
	sub				% y1-y0 x1-x0
	2 copy
	dup mul exch dup mul add sqrt	% length of segment between two points
	dup
	scale  
	atan	% atan (dy/dx)
	%dup (rotation angle = )print ==
	rotate		% now line between 0,0 and 1,0 is the line perpendicular to which the axial lines are drawn					
	
	/Function load setupFunEval	% may need to setup function dictionary by calling setupFunEval
	
	% this is now specific to axial shadings. Compute the maximum bounds to fill
	clippath {pathbbox}stopped {0 0 0 0}if newpath 	% x0 y0 x1 y1
	/ymax xs
	/xmax xs
	/ymin xs
	/xmin xs
	currentdict/Extend known
	{
		/Extend load 0 get
		{	
			0/Function load FunEval sc	% evaluate the function to get a color and set it
			xmin ymin xmin abs ymax ymin sub rectfill
		}if
	}if
	% paint the rects. The sampling frequency is that of our table
	/Nsteps/Function load/Size get 0 get 1 sub store
	/dx 1 Nsteps div store
	gsave
		/di ymax ymin sub store
		/Function load
		% loop Nsteps + 1 times, incrementing the index by 1 each time
		0 1 Nsteps
		{
			1 index FunEval sc
			0 ymin dx di rectfill
			dx 0 translate
		}for
		pop	% pop our function
	grestore	% origin is back to start point
	currentdict/Extend known
	{
		/Extend load 1 get
		{	
			Nsteps/Function load FunEval sc	% last element
			1 ymin xmax 1 sub abs ymax ymin sub rectfill
		}if
	}if
}bd

/shp	% this paints our shape for shading type 3
{	% x1 r1 x0 r0 -
	4 copy

	% fill interior arc
	dup 0 gt{
		0 exch a1 a0 arc
	}{
		pop 0 moveto
	}ifelse

	dup 0 gt{
		0 exch a0 a1 arcn
	}{
		pop 0 lineto
	}ifelse
	
	fill

	% fill exterior arc
	dup 0 gt{
		0 exch a0 a1 arc
	}{
		pop 0 moveto
	}ifelse

	dup 0 gt{
		0 exch a1 a0 arcn
	}{
		pop 0 lineto
	}ifelse
	
	fill
}bd

/calcmaxs
{	% calculate maximum distance vector from origin to corner points
	% of bbox
	xmin dup mul ymin dup mul add sqrt		% (xmin2 + ymin2)
	xmax dup mul ymin dup mul add sqrt		% (xmax2 + ymin2)
	xmin dup mul ymax dup mul add sqrt		% (xmin2 + ymax2)
	xmax dup mul ymax dup mul add sqrt		% (xmax2 + ymax2)
	max max max								% maximum value
}bd

/sh3
{	% emulation of shading type 3. Assumes shading dictionary is top dictionary on the dict stack
	/Coords load aload pop 	% x0 y0 r1 x1 y1 r2
	5 index 5 index translate	% origin is now at first circle origin
	3 -1 roll 6 -1 roll sub		% y0 r1 y1 r2 dx
	3 -1 roll 5 -1 roll sub		% r1 r2 dx dy
	2 copy dup mul exch dup mul add sqrt
	/dx xs						% r1 r2 dx dy
	2 copy 0 ne exch 0 ne or
	{
		% r1 r2 dx dy
		exch atan rotate	% we are now rotated so dy is zero and positive values of dx move us as expected
	}{
		pop pop
	}ifelse
	% r1 r2		
	/r2 xs
	/r1 xs
	/Function load 
	dup/Size get 0 get 1 sub	% this is the size of our table minus 1
	/Nsteps xs		% at some point we should optimize this better so NSteps is based on needed steps for the device
	setupFunEval		% may need to setup function dictionary by calling setupFunEval
	% determine the case:
	% case 0: circle1 inside circle2
	% case 1: circle 2 inside circle 1
	% case 2: r1 = r2 
	% case 3: r1 != r2
	dx r2 add r1 lt{
		% circle 2 inside of circle 1
		0 
	}{
		dx r1 add r2 le
		{ % circle 1 inside of circle 2
			1
		}{ % circles don't contain each other
			r1 r2 eq
			{	% equal
				2
			}{ % r1 != r2
				3
			}ifelse		
		}ifelse
	}ifelse
	/sh3tp xs		% sh3tp has the number of our different cases
	clippath {pathbbox}stopped {0 0 0 0}if 
	newpath 	% x0 y0 x1 y1
	/ymax xs
	/xmax xs
	/ymin xs
	/xmin xs

	% Arc angle atan( sqrt((dx*dx + dy*dy) - dr*dr), dr)
	dx dup mul r2 r1 sub dup mul sub dup 0 gt
	{
		sqrt r2 r1 sub atan
		/a0 exch 180 exch sub store 
		/a1 a0 neg store 
	}{
		pop
		/a0 0 store
		/a1 360 store		
	}ifelse		

	currentdict/Extend known
	{
		/Extend load 0 get r1 0 gt and	% no need to extend if the radius of the first end is 0
		{	
			0/Function load FunEval sc	% evaluate the function to get a color and set it
			% case 0: circle1 inside circle2
			% case 1: circle 2 inside circle 1
			% case 2: circles don't contain each other and r1 == r2
			% case 3: circles don't contain each other and r1 != r2
			{ 
				{	% case 0
					dx 0 r1 360 0 arcn
					xmin ymin moveto
					xmax ymin lineto
					xmax ymax lineto
					xmin ymax lineto
					xmin ymin lineto
					eofill		% for the bigger radius we fill everything except our circle
				}
				{	% case 1
					r1 0 gt{0 0 r1 0 360 arc fill}if
				}
				{	% case 2
					% r1 == r2, extend 0
					% r3 = r, x3 = -(abs(minx) + r), x1 = 0
				
					% x(i+1) r(i+1) x(i) r(i) shp
					0 r1 xmin abs r1 add neg r1 shp
				}
				{	% case 3
					% no containment, r1 != r2
				
					r2 r1 gt{	% the endpoint we are drawing is that with a circle of zero radius
						% x(i+1) r(i+1) x(i) r(i) shp
						0 r1
						r1 neg r2 r1 sub div dx mul	% this is point of beginning circle
						0	% point of ending circle
						shp	% takes x(i+1) r(i+1) x(i) r(i)
					}{	% the first circle is the bigger of the two
						% we find a circle on our line which is outside the bbox in the
						% negative direction
						% x(i+1) r(i+1) x(i) r(i) shp
						0 r1 calcmaxs	% 0 r1 maxs
						dup
						% calculating xs: (-(maxs+r2)*x2)/(x2-(r1-r2))
						r2 add dx mul dx r1 r2 sub sub div
						neg				% maxs xs'
						exch 1 index	% xs' maxs xs'
						abs exch sub
						shp
					}ifelse
				} 
			}sh3tp get exec	% execute the extend at beginning proc for our shading type
		}if
	}if

	% now do the shading
	/d0 0 store
	/r0 r1 store
	/di dx Nsteps div store
	/ri r2 r1 sub Nsteps div store 
	/Function load 
	0 1 Nsteps
	{	% function t(i)
		1 index FunEval sc
		d0 di add r0 ri add d0 r0 shp
		{
		% fill interior arc
		d0 0 r0 a1 a0 arc
		d0 di add 0 r0 ri add a0 a1 arcn
		fill
		
		% fill exterior arc
		d0 0 r0 a0 a1 arc
		d0 di add 0 r0 ri add a1 a0 arcn
		fill
		}pop
		
		% advance to next
		/d0 d0 di add store
		/r0 r0 ri add store
	}for
	pop	% pop our function dict

	% handle Extend
	currentdict/Extend known
	{
		/Extend load 1 get r2 0 gt and	% no need to extend if the radius of the last end is 0
		{	
			Nsteps/Function load FunEval sc	% last element
			% case 0: circle1 inside circle2
			% case 1: circle 2 inside circle 1
			% case 2: circles don't contain each other and r1 == r2
			% case 3: circles don't contain each other and r1 != r2
			{ 
				{
					dx 0 r2 0 360 arc fill
				} 
				{
					dx 0 r2 360 0 arcn
					xmin ymin moveto
					xmax ymin lineto
					xmax ymax lineto
					xmin ymax lineto
					xmin ymin lineto
					eofill		% for the bigger radius we fill everything except our circle
				} 
				{	% r1 == r2, extend 1
					% r3 = r, x3 = (abs(xmax) + r), x1 = dx
					% x(i+1) r(i+1) x(i) r(i) shp
					xmax abs r1 add r1 dx r1 shp
				}	
				{	% no containment, r1 != r2
			
					r2 r1 gt{
						% we find a circle on our line which is outside the bbox in the
						% positive direction
						% x(i+1) r(i+1) x(i) r(i) shp
						calcmaxs dup	% maxs maxs
						% calculating xs: ((maxs+r1)*x2)/(x2-(r2-r1))
						r1 add dx mul dx r2 r1 sub sub div	% maxs xs
						exch 1 index	% xs maxs xs
						exch sub
						dx r2
						shp
					}{	% the endpoint we are drawing is that with a circle of zero radius
						% x(i+1) r(i+1) x(i) r(i) shp
						r1 neg r2 r1 sub div dx mul	% this is point of ending circle
						0		% radius of ending circle
						dx 		% point of starting circle
						r2		% radius of starting circle
						shp
					}ifelse
				}
			}			
			sh3tp get exec	% execute the extend at end proc for our shading type
		}if
	}if
}bd
/sh		% emulation of shfill operator for type 2 and type 3 shadings based on type 0 functions
{	% shadingDict --
	begin
		/ShadingType load dup dup 2 eq exch 3 eq or
		{	% shadingtype
			gsave
				newpath
				/ColorSpace load scs
				currentdict/BBox known
				{
					/BBox load aload pop	% llx lly urx ury
					2 index sub				% llx lly urx ury-lly
					3 index					% llx lly urx ury-lly llx
					3 -1 roll exch sub 
					exch rectclip
				}if
				2 eq
				{sh2}{sh3}ifelse
			grestore
		}{
			% shadingtype
			pop 
			(DEBUG: shading type unimplemented\n)print flush
		}ifelse
	end
}bd

% end of language level 2 ONLY code

{restore}if not dup{save exch}if
% languagelevel3 ONLY code goes here
	L3?{	% we do these loads conditionally or else they will fail on a level 2 printer
		/sh/shfill ld
		/csq/clipsave ld
		/csQ/cliprestore ld
	}if
{restore}if

%currentdict dup maxlength exch length sub (number of extra slots in md = )print == flush	% *** how many entries are free
end
setpacking
% count 0 ne { pstack(***extras on stack during prolog execution***\n)print flush}if	% *** BARK if anything is left on stack
%%EndFile
%%EndProlog
%%BeginSetup
%%EndSetup
%%Page: 1 1
%%PageBoundingBox: 0 0 101 102
%%BeginPageSetup
cg_md begin
bp
sdmtx
[ /CIEBasedABC 4 dict dup begin 
/WhitePoint [ 0.9505 1.0000 1.0891 ] def 
/DecodeABC [ 
{ 1.0 0.0 3 -1 roll 1 index 1 index le { exch pop} { pop } ifelse 
 1 index 1 index ge { exch pop } { pop } ifelse < 
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000001010101010101010101010101
0101010101010101010101010101010101010101010101020202020202020202
0202020202020202020202020202020202030303030303030303030303030303
0303030303030304040404040404040404040404040404040404050505050505
0505050505050505050506060606060606060606060606060607070707070707
0707070707070708080808080808080808080808090909090909090909090909
0a0a0a0a0a0a0a0a0a0a0a0b0b0b0b0b0b0b0b0b0b0b0c0c0c0c0c0c0c0c0c0c
0d0d0d0d0d0d0d0d0d0d0e0e0e0e0e0e0e0e0e0f0f0f0f0f0f0f0f0f10101010
1010101010111111111111111112121212121212121313131313131313141414
1414141414151515151515151616161616161616171717171717171818181818
18181919191919191a1a1a1a1a1a1a1b1b1b1b1b1b1c1c1c1c1c1c1c1d1d1d1d
1d1d1e1e1e1e1e1e1f1f1f1f1f1f202020202020212121212121222222222223
2323232323242424242425252525252526262626262727272727282828282829
292929292a2a2a2a2a2b2b2b2b2b2c2c2c2c2c2d2d2d2d2d2e2e2e2e2e2f2f2f
2f2f303030303131313131323232323333333333343434343535353535363636
36373737373838383839393939393a3a3a3a3b3b3b3b3c3c3c3c3d3d3d3d3e3e
3e3e3f3f3f3f4040404041414141424242424343434444444445454545464646
4647474748484848494949494a4a4a4b4b4b4b4c4c4c4d4d4d4d4e4e4e4f4f4f
4f50505051515151525252535353535454545555555656565657575758585859
59595a5a5a5a5b5b5b5c5c5c5d5d5d5e5e5e5f5f5f6060606061616162626263
63636464646565656666666767676868686969696a6a6a6b6b6b6c6c6d6d6d6e
6e6e6f6f6f707070717171727273737374747475757576767677777878787979
797a7a7b7b7b7c7c7c7d7d7e7e7e7f7f7f808081818182828283838484848585
86868687878888888989898a8a8b8b8b8c8c8d8d8d8e8e8f8f90909091919292
9293939494949595969697979798989999999a9a9b9b9c9c9c9d9d9e9e9f9f9f
a0a0a1a1a2a2a3a3a3a4a4a5a5a6a6a6a7a7a8a8a9a9aaaaabababacacadadae
aeafafb0b0b0b1b1b2b2b3b3b4b4b5b5b6b6b6b7b7b8b8b9b9bababbbbbcbcbd
bdbebebebfbfc0c0c1c1c2c2c3c3c4c4c5c5c6c6c7c7c8c8c9c9cacacbcbcccc
cdcdcececfcfd0d0d1d1d2d2d3d3d4d4d5d5d6d6d7d7d8d8d9d9dadadbdcdcdd
dddededfdfe0e0e1e1e2e2e3e3e4e4e5e6e6e7e7e8e8e9e9eaeaebebecededee
eeefeff0f0f1f1f2f3f3f4f4f5f5f6f6f7f8f8f9f9fafafbfcfcfdfdfefeffff
>  dup length 1 sub 3 -1 roll mul dup dup floor cvi exch ceiling 
 cvi 3 index exch get 4 -1 roll 3 -1 roll get
 dup 3 1 roll sub 3 -1 roll dup floor cvi sub mul add 255 div } bind 

{ 1.0 0.0 3 -1 roll 1 index 1 index le { exch pop} { pop } ifelse 
 1 index 1 index ge { exch pop } { pop } ifelse < 
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000001010101010101010101010101
0101010101010101010101010101010101010101010101020202020202020202
0202020202020202020202020202020202030303030303030303030303030303
0303030303030304040404040404040404040404040404040404050505050505
0505050505050505050506060606060606060606060606060607070707070707
0707070707070708080808080808080808080808090909090909090909090909
0a0a0a0a0a0a0a0a0a0a0a0b0b0b0b0b0b0b0b0b0b0b0c0c0c0c0c0c0c0c0c0c
0d0d0d0d0d0d0d0d0d0d0e0e0e0e0e0e0e0e0e0f0f0f0f0f0f0f0f0f10101010
1010101010111111111111111112121212121212121313131313131313141414
1414141414151515151515151616161616161616171717171717171818181818
18181919191919191a1a1a1a1a1a1a1b1b1b1b1b1b1c1c1c1c1c1c1c1d1d1d1d
1d1d1e1e1e1e1e1e1f1f1f1f1f1f202020202020212121212121222222222223
2323232323242424242425252525252526262626262727272727282828282829
292929292a2a2a2a2a2b2b2b2b2b2c2c2c2c2c2d2d2d2d2d2e2e2e2e2e2f2f2f
2f2f303030303131313131323232323333333333343434343535353535363636
36373737373838383839393939393a3a3a3a3b3b3b3b3c3c3c3c3d3d3d3d3e3e
3e3e3f3f3f3f4040404041414141424242424343434444444445454545464646
4647474748484848494949494a4a4a4b4b4b4b4c4c4c4d4d4d4d4e4e4e4f4f4f
4f50505051515151525252535353535454545555555656565657575758585859
59595a5a5a5a5b5b5b5c5c5c5d5d5d5e5e5e5f5f5f6060606061616162626263
63636464646565656666666767676868686969696a6a6a6b6b6b6c6c6d6d6d6e
6e6e6f6f6f707070717171727273737374747475757576767677777878787979
797a7a7b7b7b7c7c7c7d7d7e7e7e7f7f7f808081818182828283838484848585
86868687878888888989898a8a8b8b8b8c8c8d8d8d8e8e8f8f90909091919292
9293939494949595969697979798989999999a9a9b9b9c9c9c9d9d9e9e9f9f9f
a0a0a1a1a2a2a3a3a3a4a4a5a5a6a6a6a7a7a8a8a9a9aaaaabababacacadadae
aeafafb0b0b0b1b1b2b2b3b3b4b4b5b5b6b6b6b7b7b8b8b9b9bababbbbbcbcbd
bdbebebebfbfc0c0c1c1c2c2c3c3c4c4c5c5c6c6c7c7c8c8c9c9cacacbcbcccc
cdcdcececfcfd0d0d1d1d2d2d3d3d4d4d5d5d6d6d7d7d8d8d9d9dadadbdcdcdd
dddededfdfe0e0e1e1e2e2e3e3e4e4e5e6e6e7e7e8e8e9e9eaeaebebecededee
eeefeff0f0f1f1f2f3f3f4f4f5f5f6f6f7f8f8f9f9fafafbfcfcfdfdfefeffff
>  dup length 1 sub 3 -1 roll mul dup dup floor cvi exch ceiling 
 cvi 3 index exch get 4 -1 roll 3 -1 roll get
 dup 3 1 roll sub 3 -1 roll dup floor cvi sub mul add 255 div } bind 

{ 1.0 0.0 3 -1 roll 1 index 1 index le { exch pop} { pop } ifelse 
 1 index 1 index ge { exch pop } { pop } ifelse < 
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000001010101010101010101010101
0101010101010101010101010101010101010101010101020202020202020202
0202020202020202020202020202020202030303030303030303030303030303
0303030303030304040404040404040404040404040404040404050505050505
0505050505050505050506060606060606060606060606060607070707070707
0707070707070708080808080808080808080808090909090909090909090909
0a0a0a0a0a0a0a0a0a0a0a0b0b0b0b0b0b0b0b0b0b0b0c0c0c0c0c0c0c0c0c0c
0d0d0d0d0d0d0d0d0d0d0e0e0e0e0e0e0e0e0e0f0f0f0f0f0f0f0f0f10101010
1010101010111111111111111112121212121212121313131313131313141414
1414141414151515151515151616161616161616171717171717171818181818
18181919191919191a1a1a1a1a1a1a1b1b1b1b1b1b1c1c1c1c1c1c1c1d1d1d1d
1d1d1e1e1e1e1e1e1f1f1f1f1f1f202020202020212121212121222222222223
2323232323242424242425252525252526262626262727272727282828282829
292929292a2a2a2a2a2b2b2b2b2b2c2c2c2c2c2d2d2d2d2d2e2e2e2e2e2f2f2f
2f2f303030303131313131323232323333333333343434343535353535363636
36373737373838383839393939393a3a3a3a3b3b3b3b3c3c3c3c3d3d3d3d3e3e
3e3e3f3f3f3f4040404041414141424242424343434444444445454545464646
4647474748484848494949494a4a4a4b4b4b4b4c4c4c4d4d4d4d4e4e4e4f4f4f
4f50505051515151525252535353535454545555555656565657575758585859
59595a5a5a5a5b5b5b5c5c5c5d5d5d5e5e5e5f5f5f6060606061616162626263
63636464646565656666666767676868686969696a6a6a6b6b6b6c6c6d6d6d6e
6e6e6f6f6f707070717171727273737374747475757576767677777878787979
797a7a7b7b7b7c7c7c7d7d7e7e7e7f7f7f808081818182828283838484848585
86868687878888888989898a8a8b8b8b8c8c8d8d8d8e8e8f8f90909091919292
9293939494949595969697979798989999999a9a9b9b9c9c9c9d9d9e9e9f9f9f
a0a0a1a1a2a2a3a3a3a4a4a5a5a6a6a6a7a7a8a8a9a9aaaaabababacacadadae
aeafafb0b0b0b1b1b2b2b3b3b4b4b5b5b6b6b6b7b7b8b8b9b9bababbbbbcbcbd
bdbebebebfbfc0c0c1c1c2c2c3c3c4c4c5c5c6c6c7c7c8c8c9c9cacacbcbcccc
cdcdcececfcfd0d0d1d1d2d2d3d3d4d4d5d5d6d6d7d7d8d8d9d9dadadbdcdcdd
dddededfdfe0e0e1e1e2e2e3e3e4e4e5e6e6e7e7e8e8e9e9eaeaebebecededee
eeefeff0f0f1f1f2f3f3f4f4f5f5f6f6f7f8f8f9f9fafafbfcfcfdfdfefeffff
>  dup length 1 sub 3 -1 roll mul dup dup floor cvi exch ceiling 
 cvi 3 index exch get 4 -1 roll 3 -1 roll get
 dup 3 1 roll sub 3 -1 roll dup floor cvi sub mul add 255 div } bind 
] def 
/MatrixABC [ 0.4124 0.2126 0.0193 0.3576 0.7151 0.1192 0.1805 0.0722 0.9508 ] def 
/RangeLMN [ 0.0 0.9505 0.0 1.0000 0.0 1.0891 ] def 
end ] /Cs1 exch/ColorSpace dr pop
%%EndPageSetup
/Cs1 SC
q
0 0 101 102 rc
131 0 0 131 -14 -18 cm
BI
/Width 393
/Height 393
/BitsPerComponent 8
/Decode[
0 1
0 1
0 1
]
/Interpolate true
/DataSource cg_aiproc
ID
JcC<$JcC<$JcC<$JcC<$JcFm4JcC<$JcC<$JcC<$JcC<$JcFm4JcC<$JcC<$JcC<$JcC<$JcFm4JcC<$
JcC<$JcC<$JcC<$JcFm4JcC<$JcC<$JcC<$JcC<$JcFm4JcC<$JcC<$JcC<$JcC<$JcFm4JcC<$JcC<$
JcC<$JcC<$JcFm4JcC<$JcC<$JcC<$JcC<$JcFm4JcC<$JcC<$JcC<$JcC<$JcFm4JcC<$JcC<$JcC<$
JcC<$JcFm4JcC<$JcC<$JcC<$JcC<$JcFm4JcC<$JcC<$JcC<$JcC<$JcFm4JcC<$JcC<$JcC<$JcC<$
JcFm4JcC<$JcC<$JcC<$JcC<$JcFm4JcC<$JcC<$JcC<$JcC<$JcFm4JcC<$JcC<$JcC<$JcC<$JcFm4
JcC<$JcC<$JcC<$JcC<$JcFm4JcC<$JcC<$JcC<$JcC<$JcFm4JcC<$JcC<$JcC<$JcC<$JcFm4JcC<$
JcC<$JcC<$JcC<$JcFm4JcC<$JcC<$JcC<$JcC<$JcFm4JcC<$JcC<$JcC<$JcC<$JcFm4JcC<$JcC<$
JcC<$JcC<$JcFm4JcC<$JcC<$JcC<$JcC<$JcFm4JcC<$JcC<$JcC<$JcC<$JcFm4JcC<$JcC<$JcC<$
JcC<$JcFm4JcC<$JcC<$JcC<$JcC<$JcFm4JcC<$JcC<$JcC<$JcC<$JcFm4JcC<$JcC<$JcC<$JcC<$
JcFm4JcC<$JcC<$JcC<$JcC<$JcFm4JcC<$JcC<$JcC<$JcC<$JcFm4JcC<$JcC<$JcC<$JcC<$JcFm4
JcC<$JcC<$JcC<$JcC<$JcFm4JcC<$JcC<$JcC<$JcC<$JcFm4JcC<$JcC<$JcC<$JcC<$JcFm4JcC<$
JcC<$JcC<$JcC<$JcFm4JcC<$JcC<$JcC<$JcC<$JcFm4JcC<$JcC<$JcEsorr0J.JcC<$JcFm4JcC<$
JcC<$JcEsoqu48.JcC<$JcFm4JcC<$JcC<$JcEOcqu4\:JcC<$JcFm4JcC<$JcC<$JcC<$JcC<$JcFm4
JcC<$JcC<$JcC<$JcC<$JcFm4JcC<$JcC<$JcC<$JcC<$JcFm4JcC<$JcFd1rr/YlJcD/<rr29aJcC<$
JcFm4JcC<$JcFm4qu3>iJcD/<rr29aJcC<$JcFm4JcC<$JcC<$JcC<$JcC<$JcFm4JcC<$JcGWIqu2TT
JcC<$JcC<$JcFm4JcC<$JcGWIqu2TTJcC<$JcC<$JcFm4JcC<$K`CrKK`?W'JcC<$JcC<$k5U#4JcCE'
qu29KJcC<$JcC<$JcFm4JcC<$JcC<$JcC<$JcC<$JcFm4JcC<$JcC<$JcEXfrr0e7JcC<$JcFm4JcC<$
JcC<$JcEXfrr0e7JcC<$JcFm4JcC<$JcC<$JcC<$JcC<$JcFm4JcC<$JcC<$JcC<$JcC<$JcFm4JcC<$
JcC<$JcC<$JcC<$JcFm4JcC<$JcC<$JcC<$JcC<$JcFm4JcC<$JcC<$JcC<$JcC<$JcFm4JcC<$JcC<$
JcC<$JcC<$JcFm4JcC<$JcC<$JcC`0qu6KmJcC<$JcFm4JcC<$JcC<$JcC<$JcC<$JcFm4JcC<$JcC<$
JcC<$JcC<$JcFm4JcC<$JcC<$JcC<$JcC<$JcFm4JcC<$JcC<$JcC<$JcC<$JcFm4JcC<$JcC<$JcC<$
JcC<$JcFm4JcC<$JcC<$JcC<$JcC<$JcFm4JcC<$JcC<$JcC<$JcC<$JcFm4JcC<$JcC<$JcC<$JcC<$
JcFm4JcC<$JcC<$JcC<$T)\]eJcG$8JcFm4JcC<$JcC<$JcC<$S,`BbJcG-;JcFm4JcC<$lMpb\JcD>A
JcC<$R/d0bJcG-;JcFm4JcC<$JcC<$JcC<$JcC<$JcFm4JcC<$JcG<@qu2o]JcC<$JcC<$JcFm4JcC<$
JcC<$JcC<$JcC<$JcFm4JcC<$JcG<@rr/,]JcC<$JcC<$JcFm4JcC<$JcC<$JcC<$JcC<$JcFm4JcC<$
JcC<$JcC<$JcC<$JcFm4JcC<$JcC<$JcC<$JcC<$JcFm4JcC<$JcC<$JcC<$JcC<$JcFm4JcC<$!WW3!
rdk*(s+13$s+13$s+144s+13$s+13$s+13$s+13$s+144s+13$s+13$s+13$s/5nrrdk++s+144s+13$
s+13$s+13$s/Q+urr2rsrdk+.s+144s+13$s+13$s+13$s/5nordk+.s+144s+131s8N#ls+13$s+13$
s+13$s+144s+13$s+13$s+13$s+13$s+144s+13$s+13$s+13$s+13$s+144s+13$s+13$s+13$s+13$
s+144s+13$s+13$s+13$s+140s82ems+144s+13$s+13$s+13$s+13$s+144s+13$s+13$s+13$s+13$
s+144s+13$s+13$s+13$s+14's8N#!s+144s+13$s+13$s+13$s+14's82f!s+144s+13Is82cSs+13$
s+13$s+^RQrm^uFrj)QTs5s?4s.KDkroO02s+13$s+13$s+13$s5s?4s/,hnro3s/s+13$s+13$s+13$
s5s?4s+13$s+13$s+13$s3UfCrj_uZs5s?4s+13us82eHs0hrYs+13$s+13$s5s?4s+13us8N"Ks0M`V
s+13$s+13$s5s?4s+13$s+13$s+13$s+13$s5s?4s+13$s+13$s+13$s+13$s5s?4s0D\(rmUmus+13$
s+13$s+13$s5s?4s+13$s+13$s+13$s+13$s5s?4s+13$s+13$s+13$s1\O4rl>%is5s?4s+13$s+13$
s+13$s7H?jrm(Q@rlY7ls5s?4s+13$s+13$s+138s82eHs7?8As5s?4s+13$s+13$s+138s82eHs7?8A
s5s?4s+13$s+13$s+13$s60L[rh0:Bs5s?4s2=s:rk\Vcs+13$s+13$s0)J%rmq+#s5s?4s2=s:rk\Vc
s+13$s+13$s0)J%rmq+#s5s?4s+14;s8N"Ks-Wh;s/Z2!rn@C2s82eqs8N#Ks+144s+13$s+13$s+14,
s8N"qs+13$s+144s+13$s+13$s+14,s8N"qs+13$s+144s+13$s+13$s+13$s7lWnrdk*`s7lTHs+144
s+13$s+13$s+13$s7lWnrdk*]s8N#Ks+144s+13$s+13$s+13$s+13Rs8N#Ks+144s+13$s+13$s+13$
s+14!s8N#'s+144s+13ps8N#-s+13$s+13$s3(HArf$mVrj)QTs5s?4s3UfCrj_uZs+13$s+13ns8N"K
s185]s5s?4s+13$s+13$s+13$s+13$s5s?4s+13$s+13$s+13$s+13$s5s?4s+13$s+13$s+13$s+13$
s5s?4s+13$s+13$s+13$s7cQgrn[VRrk&2]s5s?4s+13$s+13$s+13$s7H?jrn[VOrn%2LrojB5s5s?4
s+13$s+13$s+13$s.KDerp0T8s5s?4s+13$s+13$s+13$s.02brpKf;s5s?4s+13$s+13$s+13$s2Y0:
rn@DLrpKf;s5s?4s+13$s+13$s+13$s2Y0=rn@DOrojB5s5s?4s+13$s+13$s+13ks82eMs82f3s+144
s+13$s+13$s+13$s+13$s+144s+13:s82fcs+13$s+13$s2b6;rdk+)s8N#ps8N#fs+144s+13$s+13$
s+13$s2b6;rdk*us8N#fs+144s+140s82f.s82fcs+13$s+13$s+137s8N#fs+144s+13$s+13$s+13$
s7lWnrdk+;s8N"ms+144s+13$s+13$s+13$s82inrosI^re^[Prhf^Hs5s?4s+13$s+13$s+14Ls82fX
s8N"Ks/>sKs5s?4s+13$s+13$s+14Is82eHs,I&0s5s?4s+13$s+13$s+14Fs8N#as82eHs0_n+rqHGD
s5s?4s+13$s+13$rrN0"qu2HPq#C?mm/Qt^JcEIarr2osrr)iqp]#gEk5U#4li6k]Sc=9@JcC<$JcGNF
rr29aqu20HrVucok5Y>Xh>dKRqYu-Hk5U#4li6k]_Z0N4ir=T0JcC<$JcGNFrr.KKirAoT]`8!1qYu-H
k5U#4JcC<$JcC<$JcGNFrr.KKNW4S0k5U#4VZ6Pmir=T0JcE[gqu20H`;fW4rr.KKNW4S0k5U#4VZ6Pm
ir=T0JcE[gqu)*G`;fW4rr1=Fq#5jE`rCVik5U#4U]:>mir=T0JcE[grr.KK_>j<1rr1=Fq#5jE`rCVi
k5U#4VZ6Pmir=T0JcE[grr)iqJcE[gq#C?mcN!nCP5kO\[JtgXk5U#4mf3:cQiDX:JcE[gqu20H`;fW4
rr.KKh#IBQ[JtgXk5U#4JcC<$JcC<$JcGNFrr.KKh#IBQ[JtgXk5U#4JcC<$JcC<$!WW2sre^[Ms8N"K
s4RGIrkAD`s5s?4s+13$s+13$rrN0"qu2HPq#C?mm/Qt^JcG9?rr0P0JcFm4JcC<$JcC<$`;f`6_Z0N4
M?!ANrr14Crr.uYrr2osrr0Y3JcFm4JcC<$JcC<$Jc>cNs82bOs7lWnrdk+&s82f-s+144s+13$s+13$
s+::Mre(7Gs8N"Ks4mYLrk&2]s5s?4s+13$s+13$s+14Fs8N#Fs7lSSs8N#0s+144s+13$s+13$s+13$
s7lWnrm(QCrf$mVrk/72rqubHs6K]9s7cQmrf7#Ns8N"Ks5s?4s+14Fs8N"Ks,R*ZrqubHs6K]9s7cQj
rfR5Ts7lSEs69Qqs82eHs3:T=s8N"Ks,R*ZrW3#tJcFs6JcGTHrr2oqrr/&[JcC<$]Dqd-JcF!pq#C?m
JcCc1!<*#urdk+5s+14Es82eXs.B>jrdk+3s1A=.rdk*os7lWnrdk*0rrE&rrdk+8s+14Hs7lSUs+13$
s+13$s7lWnrdk*us82f4rrE&rrdk+8s+14Es82eXs+13$s+13$s7lWnrdk*us82f4rrE$!rr.KKkl656
p](-i_Z0W7e,P"!JcC<$JcGNFrr.KKNrK+Y!WN(Ls60K6s+13$s+13$s+14Fs8N"Ks,I&0s5s?4s0D\(
rmUmus+13$s+14Is82eHs,I&0s5s?4s+13$s+13$s+14Fs8N"Ks0D\(rql`projB5s5s?4s+13$s+13$
s+14Is82eHs3q#Frk\Vcs5s?4s+13$s+13$s+14Fs8N"Ks3q#Frk\Vcs5s?4s+13$s+13$s+13_s8N"Y
s82f3s8;orrdk+;s+13$s+13$s+13$s+13$rrN0"rr2oqJcG0<JcC<$JcC<$JcC<$JcERdrr0k9r;Zcq
JcG0<JcC<$JcC<$^An33JcEdjJcC<$JcFm4JcC<$JcC<$^An32JcEdjJcC<$JcFm4JcG]Kqu2NRJcC<$
^An33JcEdjJcERdrr0k9JcFm4JcGTHrr.iUJcC<$JcC<$^]431O8o+V_Z'W8r;M9Ili2P9rVucoMuSA.
JcE@^qu20Hc2YQYqu2ZVqu4J4!<2oqJcG'9JcC<$JcC<$JcC<$JcC<$JcFm4JcG]Kqu2NRJcC<$JcC<$
JcC<$q>^HnJcG9?JcC<$JcC<$JcC<$JcC<$!WW3!rr2lqrdk+>s+13$s+13$s1\O4rdk*is+13$rrN0"
q#5jEnc+1?!<<&tL&Z`(JcC<$JcE:\qu20Hci4%Gs8N#prIP"=s+11Ms8N"Os+13$s+13$s1/1/rdk*n
s8;oordk+>s+11Ms8N"Os+13$s+13$s1eU2reCIMrQ>0<s82eHs7-,?s+13$s+13as8N"Ks2Y.js1\O1
rlY6As8VlnJcG9?Jc>`Mqu2EOJcC<$^An33JcEdjJcEIaqu4b<r;Zcqrr%EJnc+1?!<;rqM#W&+JcC<$
JcC<$^An*0b5_D>qu20Hnc+1?!<;rqM#W&+JcC<$JcC<$^An*0m/Qt^jo5A]s7lSEs7-,?rrE)rreUT*
s+13gs82eHs2=rJs8N"Ss82c]s82fWs8;oordk+>s+11Ms82eOs+13$s2=s7rIP!es+13$rrN0"q#5jE
nc+1?JcC<$JcE[gqu20H`;dCJrr.KKbl@V@qu20Hnc+1?!<<&tL&[eFrr.KKk5WC"qu)*G`;dCJrr.KK
mf31`jo>8Yqu20Hnc+1?!<<&tL&[nIq#5jEl2Q>7JcE:\rr.KKbl<7ok5U#4!<<&tL&Z`(JcC<$JcE:\
rr.KKbl<7ok5U#4!<<&tL&Z`(JcC<$JcGNFrr0n:rr.KKbl@M=rr.KKnc+1?JcC<$JcF!pqu20H]DoGA
rr.KKbl@V@rr.KKmf.k<JcC<$JcF!prr.KK\Gs,>rr.KKbl@V@rr.KKmf.k<JcC<$JcC<$JcG`Lqu4J4
rr.lVrr0n:!<2oqJcG'9JcC<$JcC<$JcC<$JcC<$JcFm4JcC<$JcC<$JcC<$JcERdrr0k9JcFm4JcG]K
qu2NRJcC<$JcC<$JcERdrr0k9!WW2srdk+;s+13$s+13$s3UfFrdk*Ws+13ds8N#9rrN0"q#5jEnc+1?
JcC<$JcF4!qu20H[K!f;rr.KKbl<7ok5U#4JcC<$JcC<$JcE:\rr.KKbl<7ok5U#4JcC<$JcC<$JcE:\
rr.lVrr0k9JcFm4JcC<$JcC<$JcC<$JcERdrr0k9JcFm4JcC<$JcC<$JcC<$JcC<$JcFm4JcE%Urr1CH
JcC<$JcC<$JcC<$JcFm4JcC<$JcC<$JcC<$JcC<$JcFm4JcE%Urr(=GJcGWIqu2TTJcC<$JcC?%!<2oq
JcG'9JcE%Urr1CHJcGWIqu2TTJcC<$JcC?%!<*#urdk+5s+13Us8N#Hs+13$s60L[rdk*Bs+13ps82fR
s8N#UrrE&rrdk+8s+13$s+13$s+13$s+13%rrE&rrdk+8s+13$s+13$s+13$s+13%rrE&rrdk+8s+13$
s+13$s7--grdk*6s+13ms8N#7s82cqs+144s+14Es8N"Xs+13$s7cQjrdk*3s+13ms8N#0s+144s+14E
s82eXs+13$s7cQjrdk*3s+13ms8N#0s+144s+14Es8N"Xs+13$s8)cprdk*-s+13ps82f-s+144s+14B
s82e[s+13$s8)cprdk*-s+13ps8N#srO`)\s5s?4s7--grfmG6s+13$s+13$s2tB@roX7XrnRO)s5s?4
s+13$s+13$s+13$s3UfCrj_uZs5s?4s+13$s+13$s+13$s3Uf@rk&2]s5s?4s+13$s+13$s+13$s3:T@
rk&2]s5s?4s+13$s+13$s+13$s+13$s5s?4s+13$s+13$s+13$s+13$s5s?4s+13$s+13$s+13$s+13$
s5s?4s/,hnro3s/s+13$s+13$s+13$s5s?4s.fVnro3s/s+13$s+14@s82eHs-E\9s5s?4s/,hnro3s/
s+13$s+14=s8N"Ks6fpdriH-Ns5s?4s+13$s+13$s+14@s82eHs-E\9s5s?4s+13$s+13$s+13$s+13$
s5s?4s6K^^rgj(?s+13$s+13$s4RGLrji(.rqcYGs5s?4s60L^rgj(?s+13$s,-jUrql_Hs4RGOriH-N
s5s?4s60L^rgj(?s+13$s,I'Urql_Hs4RGLric?Qs5s?4s+13$s+13$s+13$s,R-YrqHGDs5s?4s+13$
s+13$s+13$s+13$s5s?4s+13$s+13$s+13$s+13$s5s?4s+13$s+13$s+13$s+13$s5s?4s+13$s+13$
s+13$s-3Q\rq-5As5s?4s5O(Urk/:1rpKf;s+13$s+13$s-3Q\rq-5As5s?4s-iuerp0T8s+13$s+13$
s+13$s5s?4s-Nc_rpg#>s+13$s+13$s+13$s5s?4s53kUrhf^Hs+13$s+13$s+13$s5s?4s+13$s+13$
s+13$s.KDkrr2rsrp0T8s5s?4s,R-VrqcYGs+13$s+13$s.02hrTO94s5s?4s,R-YrqHGDs+13$s+13$
s.KDerp0T8s5s?4s,R-YrqHGDs+13$s+13$s.KDerp0T8s5s?4s+13$s+13$s+13$s3:T@rn%2LrojB5
s5s?4s+p^Srr)kJs+13$s+13$s3:T@rk&2]s5s?4s+13$s+13$s+13$s2tB@rk&2]s5s?4s+13$s+13$
s+13$s+13$s5s?4s+13$s+13$s+13$s.fVkroO02s5s?4s+13$s+13$s+13$s.fVkroO02s5s?4s+11N
s8W)tJcCK)JcC<$JcC<$JcFm4JcC<$JcC<$JcC<$JcF4!rr05'JcFm4JcC<$JcFI(!ri6!X8dbNJcC<$
rVulrh>dBOZN#LUk5U#4JcC<$gA_6Rs8K)!JcC<$JcG]Krr.`RJcFm4JcC<$JcC<$JcC<$Jc>`Mq#63O
JcFm4JcC<$JcC<$JcC<$JcG]Krr.`RJcFm4JcC<$JcC<$JcE=]qu4n@JcDqRrr1LKJcFm4JcC<$JcC<$
JcC<$JcC<$JcFm4JcC<$JcC<$JcC<$JcC<$JcFm4JcC<$JcC<$JcC<$JcFa0rr/\mJcFm4JcC<$lMpb\
JcD>AJcC<$JcE7[rr11BJcFm4JcC<$JcC<$JcC<$JcE@^q#8Y?JcFm4JcC<$lMpb\JcD>AJcC<$JcC<$
JcFm4JcC<$JcC<$JcCN*rr2osQ2ga\JcG?AJcFm4JcC<$JcC<$JcCN*rr2osQ2ga\JcG?AJcFm4JcC<$
JcC<$JcC<$JcC<$JcFm4JcC<$JcC<$JcC<$JcC<$JcFm4JcC<$JcDGDrr2osrr23_JcC<$JcC<$JcFm4
JcC<$JcC<$JcC<$JcC<$JcFm4JcC<$JcC<$JcC<$JcC<$JcFm4JcC<$JcC<$JcC<$JcC<$JcFm4JcC<$
JcC<$JcC<$JcC<$JcFm4JcC<$JcC<$JcC<$JcC<$JcFm4JcC<$JcC<$JcC<$JcC<$JcFm4JcC<$JcC<$
JcC<$JcC<$JcFm4JcC<$JcC<$JcCE'rr2orJcFF'qu3o$JcFm4JcC<$JcC<$JcC<$rr.uYqu4n@rr05'
JcFm4JcC<$JcC<$JcC<$rr.KKg&LsKZN#LUk5U#4JcC<$JcC<$JcC<$JcC<$k5U#4JcC<$JcC<$JcC<$
JcC<$k5U#4JcC<$JcC<$JcC<$JcC<$k5U#4JcE"Trr.KKeGk+"JcC<$JcC<$k5U#4JcC<$JcC<$JcC<$
JcC<$k5U#4JcC<$JcC<$JcDYJrr.KKhZ&0,k5U#4JcC<$JcC<$K`D&Nrr/qtqu20HiW"K/k5U#4JcC<$
JcC<$K`D&Nrr/hqqu20HjSsf2k5U#4JcC<$JcC<$JcC<$JcC<$k5U#4Jc>cNs8N"Ks+^Q)s+LFOrr2nJ
s+LE's5s?4s+13$s.98iroa<4s+LFOrr2nJs+LE's5s?4s+13$s-s&crU'W9s+LFOrr2nJs+LE's5s?4
s+13$s+13$s+LFOrr2nJs8Duprf7#0s5s?4s+13-s82e_s8MurrpB`:s+13$s+13$s5s?4s+13-s82eH
s8N%Ls+13$s+13$s5s?4s+13$s-s&crpB`:s+LFOrr2nJs+LE's5s?4s+13$s-s&crpB`:s+13$s+13$
s5s?4s+13$s-s&crpB`:s+13$s+13$s5s?4s+13$s6p!brj2Y%rpB`:s+13$s+13$s5s?4s+13$s-s&c
rpB`:s+13ts82eHs0r#Zs5s?4s+13$s-s&crpB`:s+13ts82eHs0r#Zs5s?4s+13$s-s&crpB`:s+14(
s8N"Ks/Z0Ns5s?4s+13$s-s&crpB`:s+13$s+13$s5s?4s+13$s-s&crpB`:s+13As82eHs6BW8s5s?4
s+13$s-s&crpB`:s+147s82eHs.B=Bs5s?4s+13$s+13$s+14@s82eHs-E\9s5s?4s+13$s-s&crpB`:
s+14@s82eHs-E\9s5s?4s+13$s-s&crpB`:s2P*<rkJJas+13$s5s?4s+13$s-s&crpB`:s2P*<rkJKD
s8N"Ks31Los5s?4s+13$s+13$s+13$s+13$s5s?4s+13$s+13$s+13\s8MtJs31Los5s?4s+13$s+14'
s8N"Ks/c6Os+13$s5s?4s+13$s+14*s82eHs2=s:rp9Z9s+13$s5s?4s+13$s+14's7lSEs3UfCrosH6
s+13$s5s?4s+13$s+14$s82eHs3UfCrosH6s+13$s5s?4s+13$s+13$s+13$s+13$s5s?4s+13$s+13$
s+13$s+13$s5s?4s+13$s+13$s24m6rl+ngs+13$s5s?4s+13$s+13$s24m6rl+ngs+13$s5s?4s+13$
s+13$s24m6rl+ngs+13$s5s?4s+13$s+13$s+13$s+13$s5s?4s+13$s+13$s+13$s+13$s5s?4s+13$
s+13$s+13$s+13$s5s?4s+13$s+13$s+13$s+13$s5s?4s+13$s+13$s+13$s+13$s5s?4s+13$s5s@V
rh]XGs+13$s+13$s5s?4s+13$s5X.YrhBFDs+13$s+13$s5s?4s+13$s+13$s+13$s+13$s5s?4s+13$
s+13$s+13$s+13$s5s?4s+13$s+13$s+13$s+13$s5s?4s+13$s+13$s187-rm(Ops+13$s5s?4s+13$
s+13$s1870rlb=ms+13$s5s?4s+13$s+13$s+13$s+13$s5s?4s+13$s+13$s+13$s+13$s5s?4s+13$
s+13$s+13$s+13$s5s?4s+13$s+13$s+13$s+13$s5s?4s+13$s+13$s+13$s+13$s5s?4s+13$s+13$
s+13$s+13$s5s?4s+13$s+13$s+13$s+13$s5s?4s+13$s+13$s+13$s+13$s5s?4s+13$s+13$s+13$
s+13$s5s?4s+13$s+13$s+13$s+13$s5s?4s+13$s+13$s+13$s+13$s5s?4s+13$s+13$s+13$s+13$
s5s?4s+13$s+13$s+13$s+13$s5s?4s+13$s+13$s+13$s+13$s5s?4s+13$s+13$s+13$s+13$s5s?4
s+13$s+13$s+13$s+13$s5s?4s+13$s+13$s+13$s+13$s5s?4s+13$s+13$s+13$s+13$s5s?4s+13$
s+13$s+13$s+13$s5s?4s+13$s+13$s+13$s+13$s5s?4s+13$s+13$s+13$s+13$s5s?4s+13$s+13$
s+13$s+13$s5s?4s+13$s+13$s+13$s+13$s5s?4s+13$s+13$s+13$s+13$s5s?4s+13$s+13$s+13$
s+13$s5s?4s+13$s+13$s+13$s+13$s5s?4s+13$s+13$s+13$s+13$s5s?4s+13$s+13$s+13$s+13$
s5s?4s+13$s+13$s+13$s+13$s5s?4s+13$s+13$s+13$s+13$s5s?4s+13$s+13$s+13$s+13$s5s?4
s+13$s+13$s+13$s+13$s5s?4s+13$s+13$s+13$s+13$s5s?4s+13$s+13$s+13$s+13$s5s?4s+13$
s+13$s+13$s+13$s5s?4s+13$s+13$s+13$s+13$s5s?4s+13$s+13$s+13$s+13$s5s?4s+13$s+13$
s+13$s+13$s5s?4s+13$s+13$s+13$s+13$s5s?4s+13$s+13$s+13$s+13$s5s?4s+13$s+13$s+13$
s+13$s5s?4s+13$s+13$s+13$s+13$s5s?4s+13$s+13$s+13$s+13$s5s?4s+13$s+13$s+13$s+13$
s5s?4s+13$s+13$s+13$s+13$s5s?4s+13$s+13$s+13$s+13$s5s?4s+13$s+13$s+13$s+13$s5s?4
s+13$s+13$s+13$s+13$s5s?4s+13$s+13$s+13$s+13$s5s?4s+13$s+13$s+13$s+13$s5s?4s+13$
s+13$s+13$s+13$s5s?4s+13$s+13$s+13$s+13$s5s?4s+13$s+13$s+13$s+13$s5s?4s+13$s+13$
s+13$s+13$s5s?4s+13$s+13$s+13$s+13$s5s?4s+13$s+13$s+13$s+13$s5s?4s+13$s+13$s+13$
s+13$s5s?4s+13$s+13$s+13$s+13$s5s?4s+13$s+13$s+13$s+13$s5s?4s+13$s+13$s+13$s+13$
s5s?4s+13$s+13$s+13$s+13$s5s?4s+13$s+13$s+13$s+13$s5s?3
~> %APLeod
EI
ep
end
%%Trailer
%%EOF
